// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Product component test Snapshot test Should mactch the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Product
    description="refrigerante"
    name="Itubaina"
    price={5}
    showPrice={true}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        "Nome:",
        <p
          className="product-name"
        >
          Itubaina
        </p>,
        <p
          className="product-price"
        >
          Preço: 
          5
        </p>,
        "Descrição:  ",
        <p
          className="product-description"
        >
          refrigerante
        </p>,
      ],
    },
    "ref": null,
    "rendered": Array [
      "Nome:",
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Itubaina",
          "className": "product-name",
        },
        "ref": null,
        "rendered": "Itubaina",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "Preço: ",
            5,
          ],
          "className": "product-price",
        },
        "ref": null,
        "rendered": Array [
          "Preço: ",
          5,
        ],
        "type": "p",
      },
      "Descrição:  ",
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "refrigerante",
          "className": "product-description",
        },
        "ref": null,
        "rendered": "refrigerante",
        "type": "p",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          "Nome:",
          <p
            className="product-name"
          >
            Itubaina
          </p>,
          <p
            className="product-price"
          >
            Preço: 
            5
          </p>,
          "Descrição:  ",
          <p
            className="product-description"
          >
            refrigerante
          </p>,
        ],
      },
      "ref": null,
      "rendered": Array [
        "Nome:",
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Itubaina",
            "className": "product-name",
          },
          "ref": null,
          "rendered": "Itubaina",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Preço: ",
              5,
            ],
            "className": "product-price",
          },
          "ref": null,
          "rendered": Array [
            "Preço: ",
            5,
          ],
          "type": "p",
        },
        "Descrição:  ",
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "refrigerante",
            "className": "product-description",
          },
          "ref": null,
          "rendered": "refrigerante",
          "type": "p",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
